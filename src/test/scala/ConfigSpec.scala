import o1.GridPos
import o1.grid.CompassDir.{East, North, West}
import o1.grid.GridPos
import org.scalatest.BeforeAndAfter
import org.scalatest.flatspec.AnyFlatSpec
import org.scalatest.matchers.should.*

import java.io.IOException

class ConfigSpec extends AnyFlatSpec with Matchers with BeforeAndAfter:

  "loadConfig" should "work according to specification" in {

    withClue("valid configuration should initialize Map and Players correctly") {
      val initializer = loadConfig("src/test/test-launch-configurations/valid-test-configuration/")
      initializer._1.tiles should be (Vector(GrassTile(GridPos(1,1)), GrassTile(GridPos(2,1)), GrassTile(GridPos(3,1)), GrassTile(GridPos(4,1)), GrassTile(GridPos(5,1)), GrassTile(GridPos(6,1)), SandTile(GridPos(7,1)), SandTile(GridPos(8,1)), SandTile(GridPos(9,1)), SandTile(GridPos(10,1)), GrassTile(GridPos(11,1)), GrassTile(GridPos(12,1)), GrassTile(GridPos(13,1)), GrassTile(GridPos(14,1)), GrassTile(GridPos(15,1)), GrassTile(GridPos(16,1)), GrassTile(GridPos(1,2)), GrassTile(GridPos(2,2)), GrassTile(GridPos(3,2)), RockTile(GridPos(4,2)), RockTile(GridPos(5,2)), GrassTile(GridPos(6,2)), GrassTile(GridPos(7,2)), SandTile(GridPos(8,2)), SandTile(GridPos(9,2)), GrassTile(GridPos(10,2)), GrassTile(GridPos(11,2)), GrassTile(GridPos(12,2)), GrassTile(GridPos(13,2)), RockTile(GridPos(14,2)), GrassTile(GridPos(15,2)), GrassTile(GridPos(16,2)), GrassTile(GridPos(1,3)), GrassTile(GridPos(2,3)), GrassTile(GridPos(3,3)), GrassTile(GridPos(4,3)), GrassTile(GridPos(5,3)), GrassTile(GridPos(6,3)), GrassTile(GridPos(7,3)), GrassTile(GridPos(8,3)), SandTile(GridPos(9,3)), ForestTile(GridPos(10,3)), ForestTile(GridPos(11,3)), GrassTile(GridPos(12,3)), GrassTile(GridPos(13,3)), GrassTile(GridPos(14,3)), GrassTile(GridPos(15,3)), GrassTile(GridPos(16,3)), GrassTile(GridPos(1,4)), GrassTile(GridPos(2,4)), GrassTile(GridPos(3,4)), GrassTile(GridPos(4,4)), GrassTile(GridPos(5,4)), ForestTile(GridPos(6,4)), RockTile(GridPos(7,4)), GrassTile(GridPos(8,4)), RockTile(GridPos(9,4)), RockTile(GridPos(10,4)), ForestTile(GridPos(11,4)), ForestTile(GridPos(12,4)), GrassTile(GridPos(13,4)), GrassTile(GridPos(14,4)), GrassTile(GridPos(15,4)), GrassTile(GridPos(16,4)), GrassTile(GridPos(1,5)), GrassTile(GridPos(2,5)), GrassTile(GridPos(3,5)), ForestTile(GridPos(4,5)), ForestTile(GridPos(5,5)), ForestTile(GridPos(6,5)), ForestTile(GridPos(7,5)), ConquestTile(GridPos(8,5)), ConquestTile(GridPos(9,5)), ForestTile(GridPos(10,5)), ForestTile(GridPos(11,5)), ForestTile(GridPos(12,5)), ForestTile(GridPos(13,5)), GrassTile(GridPos(14,5)), GrassTile(GridPos(15,5)), GrassTile(GridPos(16,5)), GrassTile(GridPos(1,6)), GrassTile(GridPos(2,6)), GrassTile(GridPos(3,6)), GrassTile(GridPos(4,6)), ForestTile(GridPos(5,6)), ForestTile(GridPos(6,6)), RockTile(GridPos(7,6)), RockTile(GridPos(8,6)), GrassTile(GridPos(9,6)), RockTile(GridPos(10,6)), ForestTile(GridPos(11,6)), GrassTile(GridPos(12,6)), GrassTile(GridPos(13,6)), GrassTile(GridPos(14,6)), GrassTile(GridPos(15,6)), GrassTile(GridPos(16,6)), GrassTile(GridPos(1,7)), GrassTile(GridPos(2,7)), GrassTile(GridPos(3,7)), GrassTile(GridPos(4,7)), GrassTile(GridPos(5,7)), ForestTile(GridPos(6,7)), ForestTile(GridPos(7,7)), SandTile(GridPos(8,7)), GrassTile(GridPos(9,7)), GrassTile(GridPos(10,7)), GrassTile(GridPos(11,7)), GrassTile(GridPos(12,7)), GrassTile(GridPos(13,7)), GrassTile(GridPos(14,7)), GrassTile(GridPos(15,7)), GrassTile(GridPos(16,7)), GrassTile(GridPos(1,8)), GrassTile(GridPos(2,8)), RockTile(GridPos(3,8)), GrassTile(GridPos(4,8)), GrassTile(GridPos(5,8)), GrassTile(GridPos(6,8)), GrassTile(GridPos(7,8)), SandTile(GridPos(8,8)), SandTile(GridPos(9,8)), GrassTile(GridPos(10,8)), GrassTile(GridPos(11,8)), RockTile(GridPos(12,8)), RockTile(GridPos(13,8)), GrassTile(GridPos(14,8)), GrassTile(GridPos(15,8)), GrassTile(GridPos(16,8)), GrassTile(GridPos(1,9)), GrassTile(GridPos(2,9)), GrassTile(GridPos(3,9)), GrassTile(GridPos(4,9)), GrassTile(GridPos(5,9)), GrassTile(GridPos(6,9)), SandTile(GridPos(7,9)), SandTile(GridPos(8,9)), SandTile(GridPos(9,9)), SandTile(GridPos(10,9)), GrassTile(GridPos(11,9)), GrassTile(GridPos(12,9)), GrassTile(GridPos(13,9)), GrassTile(GridPos(14,9)), GrassTile(GridPos(15,9)), GrassTile(GridPos(16,9))))
      initializer._2.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(2, 4), East, true), TankUnit(GridPos(2, 6), East, true), SoldiersUnit(GridPos(1, 4), East, true), SoldiersUnit(GridPos(1, 5), East, true), SoldiersUnit(GridPos(1, 6), East, true), SniperUnit(GridPos(1, 3), East, true), SniperUnit(GridPos(1, 7), East, true)))
      initializer._3.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(15, 4), West, false), TankUnit(GridPos(15, 6), West, false), SoldiersUnit(GridPos(16, 4), West, false), SoldiersUnit(GridPos(16, 5), West, false), SoldiersUnit(GridPos(16, 6), West, false), SniperUnit(GridPos(16, 3), West, false), SniperUnit(GridPos(16, 7), West, false)))
    }

    withClue("empty directory should throw IOException") {
      val exception = intercept[IOException] {
        loadConfig("src/test/test-launch-configurations/alternate-test-configurations/empty-directory/")
      }
      exception.getMessage shouldEqual "Could not identify unique launch configuration file"
    }

    withClue("valid, horizontally thinner map configuration should initialize Map and Players correctly") {
      val initializer = loadConfig("src/test/test-launch-configurations/alternate-test-configurations/horizontally-thinner-map/")
      initializer._1.tiles should be (Vector(GrassTile(GridPos(1,1)), GrassTile(GridPos(2,1)), GrassTile(GridPos(3,1)), GrassTile(GridPos(4,1)), GrassTile(GridPos(1,2)), GrassTile(GridPos(2,2)), GrassTile(GridPos(3,2)), GrassTile(GridPos(4,2)), GrassTile(GridPos(1,3)), GrassTile(GridPos(2,3)), GrassTile(GridPos(3,3)), GrassTile(GridPos(4,3)), GrassTile(GridPos(1,4)), GrassTile(GridPos(2,4)), GrassTile(GridPos(3,4)), GrassTile(GridPos(4,4)), GrassTile(GridPos(1,5)), GrassTile(GridPos(2,5)), GrassTile(GridPos(3,5)), GrassTile(GridPos(4,5)), GrassTile(GridPos(1,6)), GrassTile(GridPos(2,6)), GrassTile(GridPos(3,6)), GrassTile(GridPos(4,6)), GrassTile(GridPos(1,7)), GrassTile(GridPos(2,7)), GrassTile(GridPos(3,7)), GrassTile(GridPos(4,7)), GrassTile(GridPos(1,8)), GrassTile(GridPos(2,8)), GrassTile(GridPos(3,8)), GrassTile(GridPos(4,8)), GrassTile(GridPos(1,9)), GrassTile(GridPos(2,9)), GrassTile(GridPos(3,9)), GrassTile(GridPos(4,9))))
      initializer._2.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(2, 4), East, true), TankUnit(GridPos(2, 6), East, true), SoldiersUnit(GridPos(1, 4), East, true), SoldiersUnit(GridPos(1, 5), East, true), SoldiersUnit(GridPos(1, 6), East, true), SniperUnit(GridPos(1, 3), East, true), SniperUnit(GridPos(1, 7), East, true)))
      initializer._3.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(3, 4), West, false), TankUnit(GridPos(3, 6), West, false), SoldiersUnit(GridPos(4, 4), West, false), SoldiersUnit(GridPos(4, 5), West, false), SoldiersUnit(GridPos(4, 6), West, false), SniperUnit(GridPos(4, 3), West, false), SniperUnit(GridPos(4, 7), West, false)))
    }

    withClue("valid, horizontally and vertically larger map configuration containing all possible tile types should initialize Map and Players correctly") {
      val initializer = loadConfig("src/test/test-launch-configurations/alternate-test-configurations/horizontally-wider-map/")
      initializer._1.tiles should be (Vector(GrassTile(GridPos(1,1)), GrassTile(GridPos(2,1)), GrassTile(GridPos(3,1)), GrassTile(GridPos(4,1)), GrassTile(GridPos(5,1)), GrassTile(GridPos(6,1)), SandTile(GridPos(7,1)), SandTile(GridPos(8,1)), SandTile(GridPos(9,1)), SandTile(GridPos(10,1)), GrassTile(GridPos(11,1)), GrassTile(GridPos(12,1)), GrassTile(GridPos(13,1)), GrassTile(GridPos(14,1)), GrassTile(GridPos(15,1)), GrassTile(GridPos(16,1)), DirtTile(GridPos(17, 1)), VegetativeDirtTile(GridPos(18, 1)), GravelTile(GridPos(19, 1)), GrassTile(GridPos(1,2)), GrassTile(GridPos(2,2)), GrassTile(GridPos(3,2)), RockTile(GridPos(4,2)), RockTile(GridPos(5,2)), GrassTile(GridPos(6,2)), GrassTile(GridPos(7,2)), SandTile(GridPos(8,2)), SandTile(GridPos(9,2)), GrassTile(GridPos(10,2)), GrassTile(GridPos(11,2)), GrassTile(GridPos(12,2)), GrassTile(GridPos(13,2)), RockTile(GridPos(14,2)), GrassTile(GridPos(15,2)), GrassTile(GridPos(16,2)), DirtTile(GridPos(17, 2)), VegetativeDirtTile(GridPos(18, 2)), GravelTile(GridPos(19, 2)), GrassTile(GridPos(1,3)), GrassTile(GridPos(2,3)), GrassTile(GridPos(3,3)), GrassTile(GridPos(4,3)), GrassTile(GridPos(5,3)), GrassTile(GridPos(6,3)), GrassTile(GridPos(7,3)), GrassTile(GridPos(8,3)), SandTile(GridPos(9,3)), ForestTile(GridPos(10,3)), ForestTile(GridPos(11,3)), GrassTile(GridPos(12,3)), GrassTile(GridPos(13,3)), GrassTile(GridPos(14,3)), GrassTile(GridPos(15,3)), GrassTile(GridPos(16,3)), DirtTile(GridPos(17, 3)), VegetativeDirtTile(GridPos(18, 3)), GravelTile(GridPos(19, 3)), GrassTile(GridPos(1,4)), GrassTile(GridPos(2,4)), GrassTile(GridPos(3,4)), GrassTile(GridPos(4,4)), GrassTile(GridPos(5,4)), ForestTile(GridPos(6,4)), RockTile(GridPos(7,4)), GrassTile(GridPos(8,4)), RockTile(GridPos(9,4)), RockTile(GridPos(10,4)), ForestTile(GridPos(11,4)), ForestTile(GridPos(12,4)), GrassTile(GridPos(13,4)), GrassTile(GridPos(14,4)), GrassTile(GridPos(15,4)), GrassTile(GridPos(16,4)), DirtTile(GridPos(17, 4)), VegetativeDirtTile(GridPos(18, 4)), GravelTile(GridPos(19, 4)), GrassTile(GridPos(1,5)), GrassTile(GridPos(2,5)), GrassTile(GridPos(3,5)), ForestTile(GridPos(4,5)), ForestTile(GridPos(5,5)), ForestTile(GridPos(6,5)), ForestTile(GridPos(7,5)), ConquestTile(GridPos(8,5)), ConquestTile(GridPos(9,5)), ForestTile(GridPos(10,5)), ForestTile(GridPos(11,5)), ForestTile(GridPos(12,5)), ForestTile(GridPos(13,5)), GrassTile(GridPos(14,5)), GrassTile(GridPos(15,5)), GrassTile(GridPos(16,5)), DirtTile(GridPos(17, 5)), VegetativeDirtTile(GridPos(18, 5)), GravelTile(GridPos(19, 5)), GrassTile(GridPos(1,6)), GrassTile(GridPos(2,6)), GrassTile(GridPos(3,6)), GrassTile(GridPos(4,6)), ForestTile(GridPos(5,6)), ForestTile(GridPos(6,6)), RockTile(GridPos(7,6)), RockTile(GridPos(8,6)), GrassTile(GridPos(9,6)), RockTile(GridPos(10,6)), ForestTile(GridPos(11,6)), GrassTile(GridPos(12,6)), GrassTile(GridPos(13,6)), GrassTile(GridPos(14,6)), GrassTile(GridPos(15,6)), GrassTile(GridPos(16,6)), DirtTile(GridPos(17, 6)), VegetativeDirtTile(GridPos(18, 6)), GravelTile(GridPos(19, 6)), GrassTile(GridPos(1,7)), GrassTile(GridPos(2,7)), GrassTile(GridPos(3,7)), GrassTile(GridPos(4,7)), GrassTile(GridPos(5,7)), ForestTile(GridPos(6,7)), ForestTile(GridPos(7,7)), SandTile(GridPos(8,7)), GrassTile(GridPos(9,7)), GrassTile(GridPos(10,7)), GrassTile(GridPos(11,7)), GrassTile(GridPos(12,7)), GrassTile(GridPos(13,7)), GrassTile(GridPos(14,7)), GrassTile(GridPos(15,7)), GrassTile(GridPos(16,7)), DirtTile(GridPos(17, 7)), VegetativeDirtTile(GridPos(18, 7)), GravelTile(GridPos(19, 7)), GrassTile(GridPos(1,8)), GrassTile(GridPos(2,8)), RockTile(GridPos(3,8)), GrassTile(GridPos(4,8)), GrassTile(GridPos(5,8)), GrassTile(GridPos(6,8)), GrassTile(GridPos(7,8)), SandTile(GridPos(8,8)), SandTile(GridPos(9,8)), GrassTile(GridPos(10,8)), GrassTile(GridPos(11,8)), RockTile(GridPos(12,8)), RockTile(GridPos(13,8)), GrassTile(GridPos(14,8)), GrassTile(GridPos(15,8)), GrassTile(GridPos(16,8)), DirtTile(GridPos(17, 8)), VegetativeDirtTile(GridPos(18, 8)), GravelTile(GridPos(19, 8)), GrassTile(GridPos(1,9)), GrassTile(GridPos(2,9)), GrassTile(GridPos(3,9)), GrassTile(GridPos(4,9)), GrassTile(GridPos(5,9)), GrassTile(GridPos(6,9)), SandTile(GridPos(7,9)), SandTile(GridPos(8,9)), SandTile(GridPos(9,9)), SandTile(GridPos(10,9)), GrassTile(GridPos(11,9)), GrassTile(GridPos(12,9)), GrassTile(GridPos(13,9)), GrassTile(GridPos(14,9)), GrassTile(GridPos(15,9)), GrassTile(GridPos(16,9)), DirtTile(GridPos(17, 9)), VegetativeDirtTile(GridPos(18, 9)), GravelTile(GridPos(19, 9)), GrassTile(GridPos(1,10)), GrassTile(GridPos(2,10)), GrassTile(GridPos(3,10)), GrassTile(GridPos(4,10)), GrassTile(GridPos(5,10)), GrassTile(GridPos(6,10)), SandTile(GridPos(7,10)), SandTile(GridPos(8,10)), SandTile(GridPos(9,10)), SandTile(GridPos(10,10)), GrassTile(GridPos(11,10)), GrassTile(GridPos(12,10)), GrassTile(GridPos(13,10)), GrassTile(GridPos(14,10)), GrassTile(GridPos(15,10)), GrassTile(GridPos(16,10)), DirtTile(GridPos(17, 10)), VegetativeDirtTile(GridPos(18, 10)), GravelTile(GridPos(19, 10)), GrassTile(GridPos(1,11)), GrassTile(GridPos(2,11)), GrassTile(GridPos(3,11)), GrassTile(GridPos(4,11)), GrassTile(GridPos(5,11)), GrassTile(GridPos(6,11)), SandTile(GridPos(7,11)), SandTile(GridPos(8,11)), SandTile(GridPos(9,11)), SandTile(GridPos(10,11)), GrassTile(GridPos(11,11)), GrassTile(GridPos(12,11)), GrassTile(GridPos(13,11)), GrassTile(GridPos(14,11)), GrassTile(GridPos(15,11)), GrassTile(GridPos(16,11)), DirtTile(GridPos(17, 11)), VegetativeDirtTile(GridPos(18, 11)), GravelTile(GridPos(19, 11))))
      initializer._2.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(2, 4), East, true), TankUnit(GridPos(2, 6), East, true), SoldiersUnit(GridPos(1, 4), East, true), SoldiersUnit(GridPos(1, 5), East, true), SoldiersUnit(GridPos(1, 6), East, true), SniperUnit(GridPos(1, 3), East, true), SniperUnit(GridPos(1, 7), East, true)))
      initializer._3.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(15, 4), West, false), TankUnit(GridPos(15, 6), West, false), SoldiersUnit(GridPos(16, 4), West, false), SoldiersUnit(GridPos(16, 5), West, false), SoldiersUnit(GridPos(16, 6), West, false), SniperUnit(GridPos(16, 3), West, false), SniperUnit(GridPos(16, 7), West, false)))
    }

    withClue("non-existent directory should throw IOException") {
      val exception = intercept[IOException] {
        loadConfig("src/test/non-existent-directory")
      }
      exception.getMessage shouldEqual "Directory not found"
    }

    withClue("configuration file with incomplete rows should be loaded with empty tiles being filled with TerrainTiles that are of the same type as that at position (1, 1)") {
      val initializer = loadConfig("src/test/test-launch-configurations/alternate-test-configurations/incomplete-rows/")
      initializer._1.tiles should be (Vector(GrassTile(GridPos(1,1)), GrassTile(GridPos(2,1)), GrassTile(GridPos(3,1)), GrassTile(GridPos(4,1)), GrassTile(GridPos(5,1)), GrassTile(GridPos(6,1)), SandTile(GridPos(7,1)), SandTile(GridPos(8,1)), SandTile(GridPos(9,1)), SandTile(GridPos(10,1)), GrassTile(GridPos(11,1)), GrassTile(GridPos(12,1)), GrassTile(GridPos(13,1)), GrassTile(GridPos(14,1)), GrassTile(GridPos(15,1)), GrassTile(GridPos(16,1)), GrassTile(GridPos(1,2)), GrassTile(GridPos(2,2)), GrassTile(GridPos(3,2)), RockTile(GridPos(4,2)), RockTile(GridPos(5,2)), GrassTile(GridPos(6,2)), GrassTile(GridPos(7,2)), SandTile(GridPos(8,2)), SandTile(GridPos(9,2)), GrassTile(GridPos(10,2)), GrassTile(GridPos(11,2)), GrassTile(GridPos(12,2)), GrassTile(GridPos(13,2)), RockTile(GridPos(14,2)), GrassTile(GridPos(15,2)), GrassTile(GridPos(16,2)), GrassTile(GridPos(1,3)), GrassTile(GridPos(2,3)), GrassTile(GridPos(3,3)), GrassTile(GridPos(4,3)), GrassTile(GridPos(5,3)), GrassTile(GridPos(6,3)), GrassTile(GridPos(7,3)), GrassTile(GridPos(8,3)), SandTile(GridPos(9,3)), ForestTile(GridPos(10,3)), ForestTile(GridPos(11,3)), GrassTile(GridPos(12,3)), GrassTile(GridPos(13,3)), GrassTile(GridPos(14,3)), GrassTile(GridPos(15,3)), GrassTile(GridPos(16,3)), GrassTile(GridPos(1,4)), GrassTile(GridPos(2,4)), GrassTile(GridPos(3,4)), GrassTile(GridPos(4,4)), GrassTile(GridPos(5,4)), GrassTile(GridPos(6,4)), GrassTile(GridPos(7,4)), GrassTile(GridPos(8,4)), GrassTile(GridPos(9,4)), GrassTile(GridPos(10,4)), GrassTile(GridPos(11,4)), GrassTile(GridPos(12,4)), GrassTile(GridPos(13,4)), GrassTile(GridPos(14,4)), GrassTile(GridPos(15,4)), GrassTile(GridPos(16,4)), GrassTile(GridPos(1,5)), GrassTile(GridPos(2,5)), GrassTile(GridPos(3,5)), ForestTile(GridPos(4,5)), ForestTile(GridPos(5,5)), ForestTile(GridPos(6,5)), ForestTile(GridPos(7,5)), ConquestTile(GridPos(8,5)), ConquestTile(GridPos(9,5)), ForestTile(GridPos(10,5)), ForestTile(GridPos(11,5)), ForestTile(GridPos(12,5)), ForestTile(GridPos(13,5)), GrassTile(GridPos(14,5)), GrassTile(GridPos(15,5)), GrassTile(GridPos(16,5)), GrassTile(GridPos(1,6)), ForestTile(GridPos(2,6)), ForestTile(GridPos(3,6)), RockTile(GridPos(4,6)), RockTile(GridPos(5,6)), GrassTile(GridPos(6,6)), RockTile(GridPos(7,6)), ForestTile(GridPos(8,6)), GrassTile(GridPos(9,6)), GrassTile(GridPos(10,6)), GrassTile(GridPos(11,6)), GrassTile(GridPos(12,6)), GrassTile(GridPos(13,6)), GrassTile(GridPos(14,6)), GrassTile(GridPos(15,6)), GrassTile(GridPos(16,6)), GrassTile(GridPos(1,7)), GrassTile(GridPos(2,7)), GrassTile(GridPos(3,7)), GrassTile(GridPos(4,7)), GrassTile(GridPos(5,7)), ForestTile(GridPos(6,7)), ForestTile(GridPos(7,7)), SandTile(GridPos(8,7)), GrassTile(GridPos(9,7)), GrassTile(GridPos(10,7)), GrassTile(GridPos(11,7)), GrassTile(GridPos(12,7)), GrassTile(GridPos(13,7)), GrassTile(GridPos(14,7)), GrassTile(GridPos(15,7)), GrassTile(GridPos(16,7)), GrassTile(GridPos(1,8)), GrassTile(GridPos(2,8)), RockTile(GridPos(3,8)), GrassTile(GridPos(4,8)), GrassTile(GridPos(5,8)), GrassTile(GridPos(6,8)), GrassTile(GridPos(7,8)), SandTile(GridPos(8,8)), SandTile(GridPos(9,8)), GrassTile(GridPos(10,8)), GrassTile(GridPos(11,8)), RockTile(GridPos(12,8)), RockTile(GridPos(13,8)), GrassTile(GridPos(14,8)), GrassTile(GridPos(15,8)), GrassTile(GridPos(16,8)), GrassTile(GridPos(1,9)), GrassTile(GridPos(2,9)), GrassTile(GridPos(3,9)), GrassTile(GridPos(4,9)), GrassTile(GridPos(5,9)), GrassTile(GridPos(6,9)), GrassTile(GridPos(7,9)), GrassTile(GridPos(8,9)), GrassTile(GridPos(9,9)), GrassTile(GridPos(10,9)), GrassTile(GridPos(11,9)), GrassTile(GridPos(12,9)), GrassTile(GridPos(13,9)), GrassTile(GridPos(14,9)), GrassTile(GridPos(15,9)), GrassTile(GridPos(16,9))))
    }

    withClue("trying to use invalid BattleUnits should throw an exception") {
      val exception = intercept[Exception] {
        loadConfig("src/test/test-launch-configurations/alternate-test-configurations/invalid-battleunits/")
      }
      exception.getMessage shouldEqual "invalid BattleUnit type"
    }

    withClue("invalid format should cause an appropriate exception") {
      val exception = intercept[Exception] {
        loadConfig("src/test/test-launch-configurations/alternate-test-configurations/invalid-format/")
      }
      exception.getMessage shouldEqual "invalid BattleUnit type"
    }

    withClue("invalid tiles should cause an appropriate exception") {
      val exception = intercept[Exception] {
        loadConfig("src/test/test-launch-configurations/alternate-test-configurations/invalid-tiles/")
      }
      exception.getMessage shouldEqual "invalid tile type"
    }

    withClue("valid configuration file with a non-continuous name should initialize Map and Players correctly") {
      val initializer = loadConfig("src/test/test-launch-configurations/alternate-test-configurations/non-continuous-file-name/")
      initializer._1.tiles should be (Vector(GrassTile(GridPos(1,1)), GrassTile(GridPos(2,1)), GrassTile(GridPos(3,1)), GrassTile(GridPos(4,1)), GrassTile(GridPos(5,1)), GrassTile(GridPos(6,1)), SandTile(GridPos(7,1)), SandTile(GridPos(8,1)), SandTile(GridPos(9,1)), SandTile(GridPos(10,1)), GrassTile(GridPos(11,1)), GrassTile(GridPos(12,1)), GrassTile(GridPos(13,1)), GrassTile(GridPos(14,1)), GrassTile(GridPos(15,1)), GrassTile(GridPos(16,1)), GrassTile(GridPos(1,2)), GrassTile(GridPos(2,2)), GrassTile(GridPos(3,2)), RockTile(GridPos(4,2)), RockTile(GridPos(5,2)), GrassTile(GridPos(6,2)), GrassTile(GridPos(7,2)), SandTile(GridPos(8,2)), SandTile(GridPos(9,2)), GrassTile(GridPos(10,2)), GrassTile(GridPos(11,2)), GrassTile(GridPos(12,2)), GrassTile(GridPos(13,2)), RockTile(GridPos(14,2)), GrassTile(GridPos(15,2)), GrassTile(GridPos(16,2)), GrassTile(GridPos(1,3)), GrassTile(GridPos(2,3)), GrassTile(GridPos(3,3)), GrassTile(GridPos(4,3)), GrassTile(GridPos(5,3)), GrassTile(GridPos(6,3)), GrassTile(GridPos(7,3)), GrassTile(GridPos(8,3)), SandTile(GridPos(9,3)), ForestTile(GridPos(10,3)), ForestTile(GridPos(11,3)), GrassTile(GridPos(12,3)), GrassTile(GridPos(13,3)), GrassTile(GridPos(14,3)), GrassTile(GridPos(15,3)), GrassTile(GridPos(16,3)), GrassTile(GridPos(1,4)), GrassTile(GridPos(2,4)), GrassTile(GridPos(3,4)), GrassTile(GridPos(4,4)), GrassTile(GridPos(5,4)), ForestTile(GridPos(6,4)), RockTile(GridPos(7,4)), GrassTile(GridPos(8,4)), RockTile(GridPos(9,4)), RockTile(GridPos(10,4)), ForestTile(GridPos(11,4)), ForestTile(GridPos(12,4)), GrassTile(GridPos(13,4)), GrassTile(GridPos(14,4)), GrassTile(GridPos(15,4)), GrassTile(GridPos(16,4)), GrassTile(GridPos(1,5)), GrassTile(GridPos(2,5)), GrassTile(GridPos(3,5)), ForestTile(GridPos(4,5)), ForestTile(GridPos(5,5)), ForestTile(GridPos(6,5)), ForestTile(GridPos(7,5)), ConquestTile(GridPos(8,5)), ConquestTile(GridPos(9,5)), ForestTile(GridPos(10,5)), ForestTile(GridPos(11,5)), ForestTile(GridPos(12,5)), ForestTile(GridPos(13,5)), GrassTile(GridPos(14,5)), GrassTile(GridPos(15,5)), GrassTile(GridPos(16,5)), GrassTile(GridPos(1,6)), GrassTile(GridPos(2,6)), GrassTile(GridPos(3,6)), GrassTile(GridPos(4,6)), ForestTile(GridPos(5,6)), ForestTile(GridPos(6,6)), RockTile(GridPos(7,6)), RockTile(GridPos(8,6)), GrassTile(GridPos(9,6)), RockTile(GridPos(10,6)), ForestTile(GridPos(11,6)), GrassTile(GridPos(12,6)), GrassTile(GridPos(13,6)), GrassTile(GridPos(14,6)), GrassTile(GridPos(15,6)), GrassTile(GridPos(16,6)), GrassTile(GridPos(1,7)), GrassTile(GridPos(2,7)), GrassTile(GridPos(3,7)), GrassTile(GridPos(4,7)), GrassTile(GridPos(5,7)), ForestTile(GridPos(6,7)), ForestTile(GridPos(7,7)), SandTile(GridPos(8,7)), GrassTile(GridPos(9,7)), GrassTile(GridPos(10,7)), GrassTile(GridPos(11,7)), GrassTile(GridPos(12,7)), GrassTile(GridPos(13,7)), GrassTile(GridPos(14,7)), GrassTile(GridPos(15,7)), GrassTile(GridPos(16,7)), GrassTile(GridPos(1,8)), GrassTile(GridPos(2,8)), RockTile(GridPos(3,8)), GrassTile(GridPos(4,8)), GrassTile(GridPos(5,8)), GrassTile(GridPos(6,8)), GrassTile(GridPos(7,8)), SandTile(GridPos(8,8)), SandTile(GridPos(9,8)), GrassTile(GridPos(10,8)), GrassTile(GridPos(11,8)), RockTile(GridPos(12,8)), RockTile(GridPos(13,8)), GrassTile(GridPos(14,8)), GrassTile(GridPos(15,8)), GrassTile(GridPos(16,8)), GrassTile(GridPos(1,9)), GrassTile(GridPos(2,9)), GrassTile(GridPos(3,9)), GrassTile(GridPos(4,9)), GrassTile(GridPos(5,9)), GrassTile(GridPos(6,9)), SandTile(GridPos(7,9)), SandTile(GridPos(8,9)), SandTile(GridPos(9,9)), SandTile(GridPos(10,9)), GrassTile(GridPos(11,9)), GrassTile(GridPos(12,9)), GrassTile(GridPos(13,9)), GrassTile(GridPos(14,9)), GrassTile(GridPos(15,9)), GrassTile(GridPos(16,9))))
      initializer._2.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(2, 4), East, true), TankUnit(GridPos(2, 6), East, true), SoldiersUnit(GridPos(1, 4), East, true), SoldiersUnit(GridPos(1, 5), East, true), SoldiersUnit(GridPos(1, 6), East, true), SniperUnit(GridPos(1, 3), East, true), SniperUnit(GridPos(1, 7), East, true)))
      initializer._3.battleUnits should contain theSameElementsAs(Vector[BattleUnit](TankUnit(GridPos(15, 4), West, false), TankUnit(GridPos(15, 6), West, false), SoldiersUnit(GridPos(16, 4), West, false), SoldiersUnit(GridPos(16, 5), West, false), SoldiersUnit(GridPos(16, 6), West, false), SniperUnit(GridPos(16, 3), West, false), SniperUnit(GridPos(16, 7), West, false)))
    }

    withClue("any tiles beyond the length of the first row of tiles will be left out") {
      val initializer = loadConfig("src/test/test-launch-configurations/alternate-test-configurations/rows-longer-than-first/")
      initializer._1.tiles should be (Vector(GrassTile(GridPos(1,1)), GrassTile(GridPos(2,1)), GrassTile(GridPos(3,1)), GrassTile(GridPos(4,1)), GrassTile(GridPos(5,1)), GrassTile(GridPos(6,1)), SandTile(GridPos(7,1)), SandTile(GridPos(8,1)), SandTile(GridPos(9,1)), GrassTile(GridPos(1,2)), GrassTile(GridPos(2,2)), GrassTile(GridPos(3,2)), RockTile(GridPos(4,2)), RockTile(GridPos(5,2)), GrassTile(GridPos(6,2)), GrassTile(GridPos(7,2)), SandTile(GridPos(8,2)), SandTile(GridPos(9,2)), GrassTile(GridPos(1,3)), GrassTile(GridPos(2,3)), GrassTile(GridPos(3,3)), GrassTile(GridPos(4,3)), GrassTile(GridPos(5,3)), GrassTile(GridPos(6,3)), GrassTile(GridPos(7,3)), GrassTile(GridPos(8,3)), SandTile(GridPos(9,3)), GrassTile(GridPos(1,4)), GrassTile(GridPos(2,4)), GrassTile(GridPos(3,4)), GrassTile(GridPos(4,4)), GrassTile(GridPos(5,4)), ForestTile(GridPos(6,4)), RockTile(GridPos(7,4)), GrassTile(GridPos(8,4)), RockTile(GridPos(9,4)), GrassTile(GridPos(1,5)), GrassTile(GridPos(2,5)), GrassTile(GridPos(3,5)), ForestTile(GridPos(4,5)), ForestTile(GridPos(5,5)), ForestTile(GridPos(6,5)), ForestTile(GridPos(7,5)), ConquestTile(GridPos(8,5)), ConquestTile(GridPos(9,5)), GrassTile(GridPos(1,6)), GrassTile(GridPos(2,6)), GrassTile(GridPos(3,6)), GrassTile(GridPos(4,6)), ForestTile(GridPos(5,6)), ForestTile(GridPos(6,6)), RockTile(GridPos(7,6)), RockTile(GridPos(8,6)), GrassTile(GridPos(9,6)), GrassTile(GridPos(1,7)), GrassTile(GridPos(2,7)), GrassTile(GridPos(3,7)), GrassTile(GridPos(4,7)), GrassTile(GridPos(5,7)), ForestTile(GridPos(6,7)), ForestTile(GridPos(7,7)), SandTile(GridPos(8,7)), GrassTile(GridPos(9,7)), GrassTile(GridPos(1,8)), GrassTile(GridPos(2,8)), RockTile(GridPos(3,8)), GrassTile(GridPos(4,8)), GrassTile(GridPos(5,8)), GrassTile(GridPos(6,8)), GrassTile(GridPos(7,8)), SandTile(GridPos(8,8)), SandTile(GridPos(9,8)), GrassTile(GridPos(1,9)), GrassTile(GridPos(2,9)), GrassTile(GridPos(3,9)), GrassTile(GridPos(4,9)), GrassTile(GridPos(5,9)), GrassTile(GridPos(6,9)), SandTile(GridPos(7,9)), SandTile(GridPos(8,9)), SandTile(GridPos(9,9))))
    }

    withClue("more than one configuration files in the directory should cause an exception") {
      val exception = intercept[IOException] {
        loadConfig("src/test/test-launch-configurations/alternate-test-configurations/too-many-configs")
      }
      exception.getMessage shouldEqual "Could not identify unique launch configuration file"
    }

  }