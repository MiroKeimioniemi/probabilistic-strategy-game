5.3.2023

Set up the devlopment environment and added dependencies for ScalaFX and ScalaTest.
Created the initial project structure necessary for developing the game map.

Implemented the TerrainTile trait with a couple of example terrain tile classes
implementing it with different degrade methods based on their nature and
ConfigurationConstants, changing TerrainTiles' "projectile passability" property to
"elevation" to model the terrain itself more realistically and leave projectile
passability to be calculated by the game class based on the tile properties instead.
Dependency for O1Library added to access the grid package, Map class started and
sand terrain tile added along with preliminary sketches of assets to resources.

Development is late due to workload from other courses, resulting in me only reaching
approximately 18h of work, and me being overly careful with every move so that I
would not have to wrestle with IDE configuation issues or git conflicts in the future
as my experience with both thus far consists largely of defeats. Difficulties faced
mostly include bad tutorials for libraries and my cluelessness about best practices,
especially in building the GUI, many of which have not been resolved yet. I hope to
catch up next week and cannot wait to implement the actual game logic.

6.3.2023

Implemented preliminary drawMapTiles and drawPic methods in GUI and updated TerrainTile
subclasses to case classes. GUI now displays the desired tile textures in a single row.
Modified GUI to display tiles in a MapWidth by MapHeight grid layout using GridPane and
added more placeholder assets. Implemented BattleUnit trait to the extent it was defined
in the technical plan with a TankUnit case class to have something to instantiate for
displaying BattleUnits on the map. Also added more class files.

Development has caught up to plan more, considering that many of week 2 goals have been
completed although there are no controllable battle units on the map yet.

20.3.2023

I am extremely late from the intended schedule because of various other course deadlines
and personal reasons. I simply did not have even a chance to open the project in the past
two weeks. I must cut simultaneous turns entirely and not even think about a random
generated map at this point. I must implement my own grid system because that of O1's does
not work and I will most likely have to utilize all the time I have, meaning that I will
not be able to return the project a week before. Plenty of sleepless nights lie ahead!

23.3.2023

Various changes to facilitate displaying BattleUnits on the map including refactoring GUI
methods and many other player- and BattleUnit-related classes. Due to the lack of time,
CompassDir issue was solved by caving in and adding swing as a dependency as a quick
bandaid solution. displayInGrid method was rewritten to draw TerrainTiles and BattleUnits
alike based on their positions in the grid instead of index in a vector, resulting in
BattleUnits finally being displayed on top of the map in the GUI.

24.3.2023

Added a GameMap companion object with tileGenerator and tileUpdater methods for fast and
flexible map building, as well as a getTile method for the GameMap class in anticipation
of future use. Added the symmetricTileUpdater method, which necessitated the ability for
TerrainTiles to copy themselves as well, so that only half of the map must be specified.
This also serves my original idea for the gameplay as identical sides give equal
opportunities to both players. However, I might want to change this symmetry later to be
only about the y-axis to encourage more interesting encounters and conflict. Furthermore,
I refactored drawMapTiles, drawBattleUnits, TerrainTiles and BattleUnits such that the
latter two contain their own images to achieve better encapsulation and built an initial
map for testing. I will have to soon look into some optimization already as building and
launching the GUI takes quite long after the changes. I still have to build the interface
for giving instructions to the BattleUnits but after that I will finally get to work on
the game logic.

25.3.2023

Improved game performance seen as shorter startup times and higher window responsivity by
enabling hardware acceleration and by moving the image generation back to the GUI functions,
leaving only the FileInputStreams to the TerrainTIle and BattleUnit case classes, which
resulted in most performance gains. Added the first element of interactivity through the
drawRectangleAround method, which draws a red rectangle around a selected image. This will
be rewritten pretty much immediately for something more actionable in terms of game logic,
potentially in the game class. Added various GUI methods for selecting and highlighting
BattleUnits and map tiles by rewriting drawRectangleAround. I am not entirely satisfied
with having essentially three versions of a method does very similar things, but it is
necessary to comply with type-specific behavior at this point. highlightTiles currently
places the highlighted tiles on top of the map, which does not allow the original ones
to be selected by the player. It is therefore necessary to modify these methods further.

27.3.2023

Rewrote selectableBattleUnit method's mouse click event listener and removed the
selectTiles method. No new tiles are drawn but instead, colored rectangles are added
between the image and the transparent highlight rectangle of each tile within the field
of view of the selected BattleUnit, which fully enables the necessary communication with
the Game object to finally start building the internal logic.

2.4.2023

Added fovTiles method to Game class that displays the tiles available for direct actions by
a given battleUnit and modified selectableBattleUnit function in drawBattleUnits GUI method
such that only one BattleUnit can be selected at any time. Due to not wanting to fully commit
to this decision just yet and not being a fan of options, I left the selectedBattleUnits in
Game class in vector form still at this point. I was also unsure whether the limitation of
selecting only one BattleUnit at a time should be in the GUI class or in the Game class but
this was significantly easier and therefore justified when the decision is not yet final.

3.4.2023

Rewrote the GUI to be scalable and overhauled the layout by adding more panes for presenting
information and interacting with the game, the first example of which is the updating turnCounter.
Highlighting will most likely have to be updated once again in order to clear out all selections
between turns. Building the UI like this, I really start to miss HTML and CSS...
Made symmetricTileUpdater support more different kinds of symmetries to accommodate any style of
map building.


Interim report:

The user interface starts to finally be implemented but the game is still missing. Because time is
running out and I am starting to get really fed up with ScalaFX and have therefore not implemented
a zoom feature, the map scale will be cut back to around 16 * 9 or slightly larger, which enables
me to cut back quality of life features such as selecting and commanding multiple battle units at
once, saving me development time. As there are now fewer units to control, they do not need to store
default action sets and these can be set separately by the player on each turn. This also enables me
to restrict available move sets based on selected actions and to cut at least the "patrol" action.

None of these majorly affect the spirit of the game but rather simply restrict its scale to perhaps
even a more coherent demo. All this makes simultaneous turns easier to implement but I must still
keep it on hold until the requirements imposed by the Programming Studio A course have been fully met.
I still have hope for being able to pull it off although this project will most certainly not be
completed by 19.4. as I really need all the time I can get up until 26.4. In order to streamline the
development, I will most likely have to rewrite the dreaded GUI draw functions yet again to further
enhance encapsulation of the Game and GUI classes to gain more control for the former so that I do
not have to make every change simultanously in two places.

In terms of the planned timeline, I am pretty much at the start of week 3 although the GUI should soon
be on week 4 level with relatively little work. The GUI will, however, remain less polished than my
initial idea (different from illustration) in favor of more rich gameplay rather than better graphics.
Due to my frustrations with ScalaFX, main menu and pause menu are both dropped already now and as I
envisioned the game to be closer to chess from the beginning anyway, its cut back demo version does
not need a save game feature either. Instead, the game's configurability will be about customizing the
GUI and the initial state of the game in terms of locations and properties of the predefined map tiles
and battle units with maximum freedom and expressivity.

4.4.2023

Changed the GUI so that the "Play Turn" button now visibly resets all selections. It ain't much but it's
honest work (although not too pretty looking) and now that I learned to use the "fireEvent" method, I
believe to finally have gained control over the GUI with the Game class. The only GUI changes necessary
now are to show and restrict the selections of tiles based on the currently selected action and to add
the rest of the ActionSet fields and a visualization for win progress of both players. Modified the GUI
to show action-dependent highlights. Refactored the GUI by writing a few utility functions for getting
the selected battle units and map tiles and to synthesize a mouse click in order to condense and clarify
the GUI code.

5.4.2023

Limited the number and scope of selectable tiles to one and tiles in range of the selected battle unit
and action respectively. Additionally fixed a bug introduced in the latest refactorizations that caused
and index out of bounds error when changing the selected action without a battle unit selected.